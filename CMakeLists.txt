cmake_minimum_required(VERSION 3.5)

project(TFMW)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
message(STATUS "PROJECT_SOURCE_DIR: ${PROJECT_SOURCE_DIR}")
message(STATUS "CMAKE_C_COMPILER: ${CMAKE_C_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER: ${CMAKE_CXX_COMPILER}")
message(STATUS "CMAKE_CXX_COMPILER_VERSION: ${CMAKE_CXX_COMPILER_VERSION}")
message(STATUS "CMAKE_VERSION: ${CMAKE_VERSION}")

option(ENABLE_COTIRE "ENABLE_COTIRE(not MSVC)" ON)
option(ENABLE_PROTOBUF "ENABLE_PROTOBUF(not MINGW)" OFF)
option(ENABLE_GOOGLE_TESTS "ENABLE_GOOGLE_TESTS" OFF)
option(ENABLE_CLANG "ENABLE_CLANG(CYGWIN only)" OFF)
option(ENABLE_CCACHE "ENABLE_CCACHE(not MSVC)" OFF)

if (ENABLE_COTIRE AND NOT MSVC )
    set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cotire")
    include(cotire)
endif ()

if (ENABLE_CLANG AND CYGWIN)
    set(CMAKE_C_COMPILER "/usr/bin/clang")
    set(CMAKE_CXX_COMPILER "/usr/bin/clang++")
endif ()

if (ENABLE_CCACHE AND NOT MSVC)
    find_program(CCACHE_FOUND ccache)
    if (CCACHE_FOUND)
        message(STATUS "CCACHE_FOUND: ${CCACHE_FOUND}")
        foreach (LANG C CXX)
            if (NOT DEFINED CMAKE_${LANG}_COMPILER_LAUNCHER AND NOT CMAKE_${LANG}_COMPILER MATCHES ".*/ccache$")
                message(STATUS "Enabling ccache for ${LANG}")
                set(CMAKE_${LANG}_COMPILER_LAUNCHER ${CCACHE_FOUND} CACHE STRING "")
            endif ()
            message(STATUS "Enabling ccache for: CMAKE_${LANG}_COMPILER_LAUNCHER")
        endforeach ()
    endif (CCACHE_FOUND)
endif ()

if (UNIX)
    SET(CMAKE_CXX_FLAGS -pthread)
endif ()

if (MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W3 -o2")
    add_definitions(-D_WIN32_WINNT=0x0501)
	message(STATUS "CMAKE_TOOLCHAIN_FILE: ${CMAKE_TOOLCHAIN_FILE}")
    message(STATUS "VCPKG_TARGET_TRIPLET: ${VCPKG_TARGET_TRIPLET}")
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wextra -o2")
endif ()

if (MINGW)
    target_link_libraries(${PROJECT_NAME} ws2_32)
    target_link_libraries(${PROJECT_APP_SAMPLE} ws2_32)

    set(Boost_INCLUDE_DIR "D:/boost/boost_1_64_0_MinGW_/include/boost-1_64")
    set(Boost_LIBRARY "D:/boost/boost_1_64_0_MinGW_/lib")
    set(BOOST_ROOT "D:/boost/boost_1_64_0_MinGW_")
    include_directories(${Boost_INCLUDE_DIR})
endif ()

find_package(Boost COMPONENTS signals serialization filesystem thread system REQUIRED)
if (Boost_FOUND)
    message(STATUS "Boost_VERSION: ${Boost_VERSION}")
    message(STATUS "Boost_INCLUDE_DIRS: ${Boost_INCLUDE_DIRS}")
    message(STATUS "Boost_LIBRARIES: ${Boost_LIBRARIES}")    
    include_directories(${Boost_INCLUDE_DIR})    
endif ()

add_subdirectory ("examples/t")
add_subdirectory ("examples/application")
if (NOT MINGW AND ENABLE_PROTOBUF)
	add_subdirectory ("examples/proto")
endif ()
if (ENABLE_GOOGLE_TESTS)
	add_subdirectory ("tests")    
endif ()